// <auto-generated />
using ComputerShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComputerShop.Migrations
{
    [DbContext(typeof(ComputerShopDbContext))]
    [Migration("20230301143755_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CategoryCustomer", b =>
                {
                    b.Property<string>("CategoriesCategoryID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomersCustomerID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoriesCategoryID", "CustomersCustomerID");

                    b.HasIndex("CustomersCustomerID");

                    b.ToTable("CategoryCustomer");
                });

            modelBuilder.Entity("ComputerShop.Models.Cart_Item", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartItemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cart_orderOrderID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("Cart_orderOrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("ComputerShop.Models.Cart_order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<string>("TrackingID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderID");

                    b.HasIndex("TrackingID");

                    b.ToTable("cart_Orders");
                });

            modelBuilder.Entity("ComputerShop.Models.Category", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryID");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("ComputerShop.Models.Customer", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cart_orderOrderID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PhoneNo")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerID");

                    b.HasIndex("Cart_orderOrderID");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ComputerShop.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.ToTable("payments");
                });

            modelBuilder.Entity("ComputerShop.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("specifications")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ComputerShop.Models.Tracking", b =>
                {
                    b.Property<string>("TrackingID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Curier_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TrackingStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TrackingID");

                    b.ToTable("trackings");
                });

            modelBuilder.Entity("CustomerProduct", b =>
                {
                    b.Property<string>("CustomersCustomerID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductsProductID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CustomersCustomerID", "ProductsProductID");

                    b.HasIndex("ProductsProductID");

                    b.ToTable("CustomerProduct");
                });

            modelBuilder.Entity("CategoryCustomer", b =>
                {
                    b.HasOne("ComputerShop.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerShop.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersCustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerShop.Models.Cart_Item", b =>
                {
                    b.HasOne("ComputerShop.Models.Cart_order", null)
                        .WithMany("Cart_Items")
                        .HasForeignKey("Cart_orderOrderID");

                    b.HasOne("ComputerShop.Models.Product", null)
                        .WithMany("Cart_Items")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("ComputerShop.Models.Cart_order", b =>
                {
                    b.HasOne("ComputerShop.Models.Tracking", null)
                        .WithMany("Cart_Orders")
                        .HasForeignKey("TrackingID");
                });

            modelBuilder.Entity("ComputerShop.Models.Customer", b =>
                {
                    b.HasOne("ComputerShop.Models.Cart_order", null)
                        .WithMany("Customers")
                        .HasForeignKey("Cart_orderOrderID");
                });

            modelBuilder.Entity("ComputerShop.Models.Payment", b =>
                {
                    b.HasOne("ComputerShop.Models.Customer", "Customer")
                        .WithOne("Payment")
                        .HasForeignKey("ComputerShop.Models.Payment", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ComputerShop.Models.Product", b =>
                {
                    b.HasOne("ComputerShop.Models.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("CustomerProduct", b =>
                {
                    b.HasOne("ComputerShop.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersCustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerShop.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerShop.Models.Cart_order", b =>
                {
                    b.Navigation("Cart_Items");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ComputerShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ComputerShop.Models.Customer", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerShop.Models.Product", b =>
                {
                    b.Navigation("Cart_Items");
                });

            modelBuilder.Entity("ComputerShop.Models.Tracking", b =>
                {
                    b.Navigation("Cart_Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
